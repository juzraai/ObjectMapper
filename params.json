{"name":"ObjectMapper by juzraai","tagline":"Properties in Java! ;-)","body":"# ObjectMapper\r\n**Properties in Java! ;-)**\r\n\r\n---\r\n\r\n\r\n\r\n## 1. What's this?\r\n\r\n*ObjectMapper* **helps you** simplify the handling of nested beans, by providing\r\ngetter and setter methods which **work with property names**. So it is basically\r\na lightweight alternative to [Spring's BeanWrapper](http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#beans-beans).\r\n*ObjectMapper* has much less functions, but it's **small** and **fast**. :-)\r\n\r\n\r\n\r\n## 2. How to use it?\r\n\r\nAssume you have these bean classes:\r\n\r\n```java\r\npublic class Organization {\r\n\tprivate String name;\r\n    private Address address;\r\n}\r\n\r\npublic class Address {\r\n\tprivate String city;\r\n\tprivate String street;\r\n    private String zip;\r\n    public Address() { }\r\n}\r\n```\r\n\r\nYou can easily fill up an organization like this:\r\n\r\n```java\r\nimport static hu.juranyi.zsolt.objectmapper.ObjectMapper.*;\r\n\r\n// ...\r\n\r\nOrganization org = new Organization();\r\nset(org, \"name\", \"CJ Holding\");\r\nset(org, \"address.city\", \"Los Santos\");\r\nset(org, \"address.street\", \"Grove Street 2.\");\r\nset(org, \"address.zip\", \"WTF-42\");\r\n\r\nSystem.out.println(get(org, \"address.city\")); // Los Santos\r\n\r\n// if you have proper getters and setters:\r\nassertNotNull(org.getAddress());\r\nassertEquals(\"Los Santos\", org.getAddress().getCity());\r\n```\r\n\r\nYou don't have to:\r\n\r\n* define getter/setter methods\r\n* set fields public\r\n* get the address object\r\n* create the address object\r\n\r\nYou just need to:\r\n\r\n* define a no-parameter constructor in Address\r\n* import `ObjectMapper.*`\r\n* call `get()`/`set()` methods\r\n\r\nLet's see a more interesting example! Assume you have an extended address class too:\r\n\r\n```java\r\npublic class AddressEx extends Address {\r\n\tprivate String phone;\r\n}\r\n\r\n```\r\n\r\nEven when the static type of `org.address` is *Address*, you can do this:\r\n\r\n```java\r\nset(org, \"address\", new AddressEx());\r\nset(org, \"address.phone\", \"123456789\");\r\nSystem.out.println(get(org, \"address.phone\")); // 123456789\r\n```\r\n\r\n`get()` and `set()` methods have various parameter lists, and there are also `list()` methods which list all properties from an *Object* or *Class*:\r\n\r\n* `Object get(Object, String)` - retrieve a single property\r\n* `Map<String, Object> get(Object)` - translates your `Object` into a `Map`\r\n* `Map<String, Object> get(Object, List<String>)` - gathers a bunch of properties into a `Map`\r\n\r\n* `boolean set(Object, String, Object)` - sets a single property\r\n* `boolean set(Object, Map<String, Object>)` - sets a bunch of properties\r\n\r\n* `List<String> list(Object)` - lists all properties *(currently only calls list(Class))*\r\n* `List<String> list(Class)` - lists all properties\r\n\r\n\r\n\r\n## 3. How does it work?\r\n\r\n*ObjectMapper* does not store anything, it simply uses [Java Reflection API](http://docs.oracle.com/javase/tutorial/reflect/)\r\nto access the declared fields, retrieve their type and value or set them.\r\n\r\nThis call:\r\n\r\n```java\r\nset(org, \"address.city\", \"Los Santos\");\r\n```\r\n\r\ndoes the same as:\r\n\r\n```java\r\nAddress a = org.getAddress();\r\nif (null == a) {\r\n\ta = new Address();\r\n\torg.setAddress(a);\r\n}\r\na.setCity(\"Los Santos\");\r\n```\r\n\r\nAnd this one:\r\n\r\n```java\r\nObject o = get(org, \"address.city\");\r\n```\r\n\r\ndoes the same as:\r\n\r\n```\r\nObject o = org.getAddress();\r\nif (null != o) {\r\n\to = ((Address) o).getCity();\r\n}\r\n```\r\n\r\nSo when a property is not readable (e.g. `address` is null so `address.city` is\r\nnot accessible) it drops back `null`.\r\n\r\nIf any error occurs when setting a property (e.g. there's no proper constructor\r\nor field), `set()` methods will return `false`.\r\n\r\n\r\n\r\n## 4. Limitations\r\n\r\nYou need to **define explicitly a no-parameter constructor** in every class that\r\nappear as type of properties.\r\n\r\n*ObjectMapper* cannot handle elements of collections. (But maybe in the future :-))\r\n\r\n\r\n\r\n## 5. Usage examples\r\n\r\nWith this tool you can easily turn your *Object* into a *Map* and back, this can\r\nbe useful for exporting an *Object* or many of them into a readable format, e.g.\r\nCSV.\r\n\r\nI use this tool also for building up an *Object* from a text matching a regexp,\r\nwhich contains named groups which are actually property names. :-)","google":"UA-41050675-5","note":"Don't delete this file! It's used internally to help with page regeneration."}