{"name":"ObjectMapper","tagline":"Properties in Java! ;-)","body":"# ObjectMapper\r\n**Properties in Java! ;-)**\r\n\r\n---\r\n\r\n\r\n\r\n## 1. What's this?\r\n\r\n*ObjectMapper* helps you simplify the handling of nested beans, by providing getter and setter methods which work with property names.\r\n\r\n\r\n\r\n## 2. How to use it?\r\n\r\nAssume you have these bean classes:\r\n```java\r\npublic class Organization {\r\n\tprivate String name;\r\n    private Address address;\r\n}\r\n\r\npublic class Address {\r\n\tprivate String city;\r\n\tprivate String street;\r\n    private String zip;\r\n    public Address() { }\r\n}\r\n```\r\n\r\nYou can easily fill up an organization like this:\r\n```java\r\nimport static hu.juranyi.zsolt.objectmapper.ObjectMapper.*;\r\n\r\n// ...\r\n\r\nOrganization org = new Organization();\r\nset(org, \"name\", \"CJ Holding\");\r\nset(org, \"address.city\", \"Los Santos\");\r\nset(org, \"address.street\", \"Grove Street 2.\");\r\nset(org, \"address.zip\", \"WTF-42\");\r\n\r\nSystem.out.println(get(org, \"address.city\")); // Los Santos\r\n```\r\n\r\nYou don't have to:\r\n\r\n* define getter/setter methods\r\n* get the address object\r\n* create the address object\r\n\r\nYou just need to:\r\n\r\n* define a no-parameter constructor in Address\r\n* import ObjectMapper.*\r\n* call get/set methods\r\n\r\n`get()` and `set()` methods have various parameter list, just check the [code](https://github.com/juzraai/ObjectMapper/blob/master/src/main/java/hu/juranyi/zsolt/objectmapper/ObjectMapper.java)! :-) There are also `list()` methods which list all properties from an *Object* or *Class*.\r\n\r\n\r\n\r\n## 3. Limitations\r\n\r\n*ObjectMapper* queries the static type of fields, so if you have a *MyAddress* class which extends *Address* and has an additional field, e.g. \"phone\", this will not work:\r\n```java\r\nset(org, \"address\", new MyAddress()); // it's okay\r\nset(org, \"address.phone\", \"12345678\"); // invalid property, because type of \"address\" is Address\r\n```\r\n\r\nAnd also you cannot handle elements of collections this way. (But maybe in the future :-))\r\n\r\nThe other limitation is that you need to **define explicitly a no-parameter constructor** in every class that appear as type of properties.\r\n\r\n\r\n\r\n## 4. Usage examples\r\n\r\nWith this tool you can easily turn your *Object* into a *Map* and back, this can be useful for exporting an *Object* or many of them into a readable format, e.g. CSV.\r\n\r\nI use this tool also for building up an *Object* from a text matching a regexp, which contains named groups which are actually property names. :-)","google":"UA-41050675-5","note":"Don't delete this file! It's used internally to help with page regeneration."}